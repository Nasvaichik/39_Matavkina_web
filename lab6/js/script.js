class Block {
    constructor(data, type) {
        this.data = data;
        this.type = type;
    }
    getHTML() {
        return '';
    }
    getEditHTML() {
        return '';
    }
}

class TextBlock extends Block {
    constructor(data) {
        super(data, 'text');
    }
    getHTML() {
        return `<div class="block text-block">
                    <p>${this.data}</p>
                    <button class="edit-button" onclick="editBlock(this)">‚úèÔ∏è</button>
                    <button class="delete-button" onclick="deleteBlock(this)">üóëÔ∏è</button>
                </div>`;
    }
    getEditHTML() {
        return `<div class="block text-block">
                    <textarea>${this.data}</textarea>
                </div>`;
    }
}

class ImageBlock extends Block {
    constructor(data) {
        super(data, 'image');
    }
    getHTML() {
        return `<div class="block image-block">
                    <img src="${this.data}" alt="Image" onerror="this.src='https://via.placeholder.com/150'">
                    <button class="edit-button" onclick="editBlock(this)">‚úèÔ∏è</button>
                    <button class="delete-button" onclick="deleteBlock(this)">üóëÔ∏è</button>
                </div>`;
    }
    getEditHTML() {
        return `<div class="block image-block">
                    <input type="text" value="${this.data}" placeholder="–í–≤–µ–¥–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è">
                </div>`;
    }
}

class ListBlock extends Block {
    constructor(data) {
        super(data, 'list');
    }
    getHTML() {
        const items = this.data.map(item => `<li>${item}</li>`).join('');
        return `<div class="block list-block">
                    <ul>${items}</ul>
                    <button class="edit-button" onclick="editBlock(this)">‚úèÔ∏è</button>
                    <button class="delete-button" onclick="deleteBlock(this)">üóëÔ∏è</button>
                </div>`;
    }
    getEditHTML() {
        const items = this.data.join('\n');
        return `<div class="block list-block">
                    <textarea>${items}</textarea>
                </div>`;
    }
}

let blocks = [];

function loadBlocks() {
    try {
        const savedBlocks = JSON.parse(localStorage.getItem('blocks'));
        if (savedBlocks && Array.isArray(savedBlocks)) {
            blocks = savedBlocks.map(block => {
                if (block && block.type && block.data) {
                    switch (block.type) {
                        case 'text':
                            return new TextBlock(block.data);
                        case 'image':
                            return new ImageBlock(block.data);
                        case 'list':
                            return new ListBlock(block.data);
                        default:
                            return null;
                    }
                }
                return null;
            }).filter(block => block !== null);
        } else {
            // –ï—Å–ª–∏ –±–ª–æ–∫–æ–≤ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            blocks = [
                new TextBlock("–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç"),
                new ImageBlock("https://via.placeholder.com/150"),
                new ListBlock(["—Ä–∞—Å—Å–∫–∞–∂–∏", "–æ", "—Å–µ–±–µ"])
            ];
            saveBlocks();
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–ª–æ–∫–æ–≤:', error);
        blocks = [
            new TextBlock("–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç"),
            new ImageBlock("https://via.placeholder.com/150"),
            new ListBlock(["—Ä–∞—Å—Å–∫–∞–∂–∏", "–æ", "—Å–µ–±–µ"])
        ];
        saveBlocks();
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function buildPage() {
    const content = document.getElementById('content');
    content.innerHTML = blocks.map(block => block.getHTML()).join('');
}

function toggleEditAll() {
    const content = document.getElementById('content');
    content.innerHTML = blocks.map(block => block.getEditHTML()).join('');
    document.querySelector('.edit-controls button:nth-child(1)').style.display = 'none'; 
    document.querySelector('.edit-controls button:nth-child(2)').style.display = 'inline-block'; 
}

function saveAll() {
    const content = document.getElementById('content');
    const blockElements = content.querySelectorAll('.block');

    blockElements.forEach((blockElement, index) => {
        const block = blocks[index];
        if (block.type === 'text') {
            block.data = blockElement.querySelector('textarea').value;
        } else if (block.type === 'image') {
            block.data = blockElement.querySelector('input').value;
        } else if (block.type === 'list') {
            block.data = blockElement.querySelector('textarea').value.split('\n');
        }
    });

    saveBlocks();
    buildPage();
    document.querySelector('.edit-controls button:nth-child(1)').style.display = 'inline-block'; 
    document.querySelector('.edit-controls button:nth-child(2)').style.display = 'none'; 
}

function deleteBlock(button) {
    const blockElement = button.closest('.block');
    const index = Array.from(blockElement.parentElement.children).indexOf(blockElement);
    blocks.splice(index, 1);
    saveBlocks();
    buildPage();
}

function editBlock(button) {
    const blockElement = button.closest('.block');
    const index = Array.from(blockElement.parentElement.children).indexOf(blockElement);
    const block = blocks[index];
    
    blockElement.outerHTML = block.getEditHTML();
}

function addBlock(type, data) {
    let newBlock;
    switch (type) {
        case 'text':
            newBlock = new TextBlock(data);
            break;
        case 'image':
            newBlock = new ImageBlock(data);
            break;
        case 'list':
            newBlock = new ListBlock(data);
            break;
    }
    blocks.push(newBlock);
    saveBlocks();
    buildPage();
}

function saveBlocks() {
    const blocksToSave = blocks.map(block => ({
        type: block.type,
        data: block.data
    }));
    localStorage.setItem('blocks', JSON.stringify(blocksToSave));
}

function loadLocalBlocks() {
    loadBlocks();
    buildPage();
}

// API –¥–ª—è —Ñ–∞–∫—Ç–æ–≤ –æ –∫–æ—Ç–∞—Ö (–ª–æ–∫–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
class CatFactsApi {
    constructor() {
        this.facts = [
            {text: "–ö–æ—à–∫–∏ –º–æ–≥—É—Ç –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å —É—à–∏ –Ω–∞ 180 –≥—Ä–∞–¥—É—Å–æ–≤.", type: "fact"},
            {text: "–£ –∫–æ—à–µ–∫ 32 –º—ã—à—Ü—ã –≤ –∫–∞–∂–¥–æ–º —É—Ö–µ.", type: "fact"},
            {text: "–ö–æ—à–∫–∏ —Å–ø—è—Ç –æ–∫–æ–ª–æ 70% —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏.", type: "fact"},
            {text: "–°–∞–º—ã–π —Å—Ç–∞—Ä—ã–π –∫–æ—Ç –≤ –º–∏—Ä–µ –ø—Ä–æ–∂–∏–ª 38 –ª–µ—Ç.", type: "fact"},
            {text: "–ö–æ—à–∫–∏ –Ω–µ —á—É–≤—Å—Ç–≤—É—é—Ç —Å–ª–∞–¥–∫–æ–≥–æ –≤–∫—É—Å–∞.", type: "fact"},
            {text: "–ö–æ—à–∫–∏ –º–æ–≥—É—Ç –ø—Ä—ã–≥–∞—Ç—å –Ω–∞ –≤—ã—Å–æ—Ç—É –≤ 5 —Ä–∞–∑ –±–æ–ª—å—à–µ —Å–≤–æ–µ–≥–æ —Ä–æ—Å—Ç–∞.", type: "fact"},
            {text: "–£ –∫–æ—à–µ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –æ—Ç–ø–µ—á–∞—Ç–æ–∫ –Ω–æ—Å–∞, –∫–∞–∫ —É –ª—é–¥–µ–π –æ—Ç–ø–µ—á–∞—Ç–∫–∏ –ø–∞–ª—å—Ü–µ–≤.", type: "fact"},
            {text: "–ö–æ—à–∫–∏ –º–æ–≥—É—Ç –∏–∑–¥–∞–≤–∞—Ç—å –æ–∫–æ–ª–æ 100 —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–≤—É–∫–æ–≤.", type: "fact"},
            {text: "–í –î—Ä–µ–≤–Ω–µ–º –ï–≥–∏–ø—Ç–µ –∫–æ—à–µ–∫ —Å—á–∏—Ç–∞–ª–∏ —Å–≤—è—â–µ–Ω–Ω—ã–º–∏ –∂–∏–≤–æ—Ç–Ω—ã–º–∏.", type: "fact"},
            {text: "–ö–æ—à–∫–∞ –º–æ–∂–µ—Ç –±–µ–∂–∞—Ç—å —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é –¥–æ 50 –∫–º/—á –Ω–∞ –∫–æ—Ä–æ—Ç–∫–∏–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏.", type: "fact"}
        ];
    }

    async getFacts() {
        return new Promise(resolve => {
            setTimeout(() => {
                resolve(this.facts);
            }, 500); // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–∏
        });
    }
}

// API –¥–ª—è —à—É—Ç–æ–∫ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–±–æ—Ç–∞—é—â–∏–π API)
class JokesApi {
    async getRandomJokes() {
        try {
            const response = await fetch('https://v2.jokeapi.dev/joke/Any?amount=5');
            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à—É—Ç–æ–∫');
            const data = await response.json();
            return data.jokes || [data];
        } catch (error) {
            console.error('Error loading jokes:', error);
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —à—É—Ç–∫–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return [
                {setup: "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ø—É—Ç–∞—é—Ç –•—ç–ª–ª–æ—É–∏–Ω –∏ –†–æ–∂–¥–µ—Å—Ç–≤–æ?", delivery: "–ü–æ—Ç–æ–º—É —á—Ç–æ Oct 31 == Dec 25", category: "Programming"},
                {joke: "–Ø —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–ª —à—É—Ç–∫–∏ –ø—Ä–æ MVC, –Ω–æ –º–æ–¥–µ–ª—å –Ω–µ —Å–º–µ—è–ª–∞—Å—å, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤—ã–≥–ª—è–¥–µ–ª–æ —Å–º—É—â–µ–Ω–Ω—ã–º, –∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ø—Ä–æ—Å—Ç–æ –ø–æ—Ç–µ—Ä—è–ª—Å—è.", category: "Programming"},
                {setup: "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞—é—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –±–æ–∏—Ç—Å—è –∂–µ–Ω—â–∏–Ω?", delivery: "–ì–∏–∫-–æ—Ñ–æ–±", category: "Programming"},
                {joke: "–ö–æ–º–ø—å—é—Ç–µ—Ä –Ω–µ –¥–∞–µ—Ç –º–Ω–µ —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –∂–∏–∑–Ω–∏... —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã.", category: "Programming"},
                {setup: "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –≤—Å–µ–≥–¥–∞ —Ö–æ–ª–æ–¥–Ω—ã–π?", delivery: "–ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å Windows", category: "Programming"}
            ];
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API
const catFactsApi = new CatFactsApi();
const jokesApi = new JokesApi();

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
async function loadCatFacts() {
    try {
        document.getElementById('loading').style.display = 'flex';
        const facts = await catFactsApi.getFacts();
        
        const content = document.getElementById('content');
        content.innerHTML = `
            <div class="api-content">
                <h2>–§–∞–∫—Ç—ã –æ –∫–æ—Ç–∞—Ö</h2>
                ${facts.slice(0, 10).map(fact => `
                    <div class="api-item">
                        <p>${fact.text}</p>
                        <small>–¢–∏–ø: ${fact.type}</small>
                    </div>
                `).join('')}
            </div>
        `;
    } catch (error) {
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–∫—Ç—ã –æ –∫–æ—Ç–∞—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        console.error('Error loading cat facts:', error);
    } finally {
        document.getElementById('loading').style.display = 'none';
    }
}

async function loadJokes() {
    try {
        document.getElementById('loading').style.display = 'flex';
        const jokes = await jokesApi.getRandomJokes();
        
        const content = document.getElementById('content');
        content.innerHTML = `
            <div class="api-content">
                <h2>–°–ª—É—á–∞–π–Ω—ã–µ —à—É—Ç–∫–∏</h2>
                ${jokes.slice(0, 5).map(joke => `
                    <div class="api-item">
                        ${joke.setup ? `<p><strong>${joke.setup}</strong></p>` : ''}
                        ${joke.delivery ? `<p>${joke.delivery}</p>` : ''}
                        ${joke.joke ? `<p>${joke.joke}</p>` : ''}
                        <small>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${joke.category || 'Any'}</small>
                    </div>
                `).join('')}
            </div>
        `;
    } catch (error) {
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—É—Ç–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        console.error('Error loading jokes:', error);
    } finally {
        document.getElementById('loading').style.display = 'none';
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function showError(message) {
    const modal = document.getElementById('modal');
    document.getElementById('modal-title').textContent = '–û—à–∏–±–∫–∞';
    document.getElementById('modal-body').innerHTML = `<p>${message}</p>`;
    modal.style.display = 'block';
}

function closeModal() {
    document.getElementById('modal').style.display = 'none';
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
    loadBlocks();
    buildPage();
});